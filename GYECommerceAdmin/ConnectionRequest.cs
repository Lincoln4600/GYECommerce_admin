// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GYECommerceAdmin;
//
//    var connectionRequest = ConnectionRequest.FromJson(jsonString);

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GYECommerceAdmin;
//
//    var connectionRequest = ConnectionRequest.FromJson(jsonString);

namespace GYECommerceAdmin
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ConnectionRequest
    {

        [JsonProperty("checkCell")]
        public bool CheckCell { get; set; }

        [JsonProperty("UpdatePedido")]
        public bool updatePedido { get; set; }

        [JsonProperty("contrasena")]
        public string Contrasena { get; set; }

        [JsonProperty("codigo")]
        public int codigo { get; set; }

        [JsonProperty("checkPedidos")]
        public bool CheckPedidos { get; set; }

        [JsonProperty("nPedidos")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long NPedidos { get; set; }

        [JsonProperty("nombre_cliente")]
        public string[] NombreCliente { get; set; }

        [JsonProperty("apellido_cliente")]
        public string[] ApellidoCliente { get; set; }

        [JsonProperty("celular_cliente")]
        public string[] CelularCliente { get; set; }

        [JsonProperty("condWhatssap")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public long[] CondWhatssap { get; set; }

        [JsonProperty("precioPagar")]
        public string[] PrecioPagar { get; set; }

        [JsonProperty("fechaPedido")]
        public string[] FechaPedido { get; set; }

        [JsonProperty("estado_pedido")]
        public string[] EstadoPedido { get; set; }
    }

    public partial class ConnectionRequest
    {
        public static ConnectionRequest FromJson(string json) => JsonConvert.DeserializeObject<ConnectionRequest>(json, GYECommerceAdmin.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ConnectionRequest self) => JsonConvert.SerializeObject(self, GYECommerceAdmin.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long[]);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value.ToArray();
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (long[])untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
